--- devcon2017-1.sync.js
+++ devcon2017-4.await.js
@@ -1,1 +1,1 @@
 'use strict';
 
 //
 // Imports
 //
 
-const Fiber = require('fibers');
+const Promise = require('bluebird');
 
 const colors = require('colors');
-const fs = require('fs');
-const request = require('sync-request');
-const mongodb = require('mongo-sync');
+const fs = Promise.promisifyAll(require('fs'));
+const request = require('request-promise');
+const mongodb = require('mongodb');
 
 //
 // Main
 //
-
-function main() {
-    console.log('-----------'.green);
-    console.log('SYNCHRONOUS'.green);
-    console.log('-----------'.green);
-
-    console.time('SYNCHRONOUS'.yellow);
-    Fiber(syncTask).run();
-    console.timeEnd('SYNCHRONOUS'.yellow);
+async function main() {
+    console.log('--------------'.green);
+    console.log('ASYNCHRONOUS-3'.green);
+    console.log('--------------'.green);
+
+    console.time('ASYNCHRONOUS-3'.yellow);
+    await asyncTask3();
+    console.timeEnd('ASYNCHRONOUS-3'.yellow);
+    process.exit();
 }
 main();
 
 //
 // Functions
 //
 
 /**
  * Utility
  */
 function debug(label, dump) {
     return console.log(label.cyan, dump);
 }
 function error(label, dump) {
     return console.error(label.red, dump);
 }
 
 /**
- * Synchronous
+ * Asynchronous-3 using async/await
  */
-function syncTask() {
+async function asyncTask3() {
     try {
-        let fileContent = fs.readFileSync('links.json', 'utf-8');
+        let fileContent = await fs.readFileAsync('links.json', 'utf-8');
 
         debug('fileContent', fileContent);
 
         let jsonContent = JSON.parse(fileContent);
 
         debug('jsonContent', jsonContent);
 
-        let httpContent = jsonContent.map(function (item) {
-            debug('loading item', item);
-            let httpResponse = request('GET', item).getBody('utf-8');
-            return httpResponse.substr(0, 10);
-        });
+        let httpContent = await Promise.all(
+            jsonContent.map(async item => {
+                debug('loading item', item);
+                let httpResponse = await request.get(item);
+                return httpResponse.substr(0, 10);
+            })
+        );
 
         debug('httpContent', httpContent);
 
-        let dbServer = new mongodb.Server('127.0.0.1');
-        let dbContent = dbServer.db('local').getCollection('values').insert({
+        let db = await mongodb.MongoClient.connect('mongodb://127.0.0.1:27017/local');
+        let dbContent = await db.collection('values').insertOne({
             value: httpContent
         });
 
         debug('dbContent', dbContent.ops);
     }
     catch (anyError) {
         error('anyError', anyError);
     }
 }
